import sys
import re

# Declare a custom argument, to select a debug or a release build.
AddOption('--debug-build', action='store_true', help='debug build')

env = Environment(CXX = 'clang++',
                  CXXFLAGS = '-std=c++11 -stdlib=libc++',
                  LINKFLAGS = '-stdlib=libc++')
#env['FRAMEWORKS'] = ['Carbon', 'System']

is_debug = GetOption('debug_build')
is_release = not is_debug

if not is_debug:
    env.Append(CPPDEFINES="NDEBUG")

# TODO: optimization, warning etc. for different platform than OSX

# The arguments to the `SConscript` function are paths that are
# relative to the current SConscript file. The # at the start of
# an argument makes it relative to the root SConstruct file.
#
# Dir('.') gives the path to the current build's path, relative
# to the root SConstruct file.
#
# Combined together, these two things allow us to find the
# SConscript_conan file that is generated by conan in the build
# directory.
#
build_path_relative_to_sconstruct = Dir('.').path

conan = SConscript('{}/SConscript_conan'.format(build_path_relative_to_sconstruct))
if not conan:
    print ('File `SConscript_conan` is missing.')
    print ('It should be generated by running `conan install`.')
    sys.exit(1)

flags = conan["conan"]
env.MergeFlags(flags)
# TODO: Temporary hack the scons' space quote behavior
# https://github.com/SCons/scons/issues/136
links = env['LINKFLAGS']
hack_links = []
for l in links:
    hack_links = hack_links + re.split('\s+', l)
print(hack_links)
env['LINKFLAGS'] = hack_links
env.Program("main", "main.cpp")
